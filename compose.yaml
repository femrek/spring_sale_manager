version: '1'

services:
  postgres-db:
    image: postgres
    container_name: postgres-db
    restart: always
    ports:
      - 5432:5432
    secrets:
      - db-credential
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    environment:
      - POSTGRES_DB=productmanagementsystem
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-credential
  service-registry:
    container_name: service-registry
    build:
      context: service-registry
    ports:
      - 8761:8761
    depends_on: 
      postgres-db:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: "curl localhost:8761"
      interval: 2s
      timeout: 3s
      retries: 5
      start_period: 4s
  auth:
    container_name: auth
    depends_on: 
      service-registry:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./auth/Dockerfile
    environment:
      - POSTGRES_DB=productmanagementsystem
      - POSTGRES_HOST=postgres-db
      - EUREKA_HOST=service-registry
      - GATEWAY_HOST=gateway
    ports:
      - 9898:9898
    networks:
      - app-network
    healthcheck:
      test: "curl localhost:9898"
      interval: 3s
      timeout: 3s
      retries: 25
      start_period: 8s
  product:
    container_name: product
    depends_on:
      service-registry:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./product/Dockerfile
    environment:
      - POSTGRES_DB=productmanagementsystem
      - POSTGRES_HOST=postgres-db
      - EUREKA_HOST=service-registry
      - GATEWAY_HOST=gateway
    ports:
      - 8081:8081
    networks:
      - app-network
    healthcheck:
      test: "curl localhost:8081"
      interval: 3s
      timeout: 3s
      retries: 25
      start_period: 8s
  report:
    container_name: report
    depends_on:
      service-registry:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./report/Dockerfile
    environment:
      - POSTGRES_DB=productmanagementsystem
      - POSTGRES_HOST=postgres-db
      - EUREKA_HOST=service-registry
      - GATEWAY_HOST=gateway
    ports:
      - 8084:8084
    networks:
      - app-network
    healthcheck:
      test: "curl localhost:8084"
      interval: 3s
      timeout: 3s
      retries: 25
      start_period: 8s
  sale:
    container_name: sale
    depends_on:
      service-registry:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./sale/Dockerfile
    environment:
      - POSTGRES_DB=productmanagementsystem
      - POSTGRES_HOST=postgres-db
      - EUREKA_HOST=service-registry
      - GATEWAY_HOST=gateway
    ports:
      - 8082:8082
    networks:
      - app-network
    healthcheck:
      test: "curl localhost:8082"
      interval: 3s
      timeout: 3s
      retries: 25
      start_period: 8s
  user-management:
    container_name: user-manaagement
    depends_on:
      service-registry:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./user-management/Dockerfile
    environment:
      - POSTGRES_DB=productmanagementsystem
      - POSTGRES_HOST=postgres-db
      - EUREKA_HOST=service-registry
      - GATEWAY_HOST=gateway
    ports:
      - 8083:8083
    networks:
      - app-network
    healthcheck:
      test: "curl localhost:8083"
      interval: 3s
      timeout: 3s
      retries: 25
      start_period: 8s
  gateway:
    container_name: gateway
    depends_on:
      service-registry:
        condition: service_healthy
      auth:
        condition: service_healthy
      product:
        condition: service_healthy
      report:
        condition: service_healthy
      sale:
        condition: service_healthy
      user-management:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./gateway/Dockerfile
    environment:
      - POSTGRES_DB=productmanagementsystem
      - POSTGRES_HOST=postgres-db
      - EUREKA_HOST=service-registry
    ports:
      - 8080:8080
    networks:
      - app-network
     
volumes:
  db-data:
  storage-data:

secrets:
  db-credential:
    file: db_credential.txt

networks:
  app-network:

